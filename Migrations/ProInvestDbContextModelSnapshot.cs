// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProInvestAPI.Models;

#nullable disable

namespace ProInvestAPI.Migrations
{
    [DbContext(typeof(ProInvestDbContext))]
    partial class ProInvestDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8mb3_general_ci")
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb3");

            modelBuilder.Entity("ProInvestAPI.Models.Adress", b =>
                {
                    b.Property<int>("IdAdress")
                        .HasColumnType("int")
                        .HasColumnName("idAdress");

                    b.Property<string>("InteriorNumber")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("interiorNumber");

                    b.Property<int>("NeighborhoodId")
                        .HasColumnType("int")
                        .HasColumnName("neighborhoodId");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("number");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("postalCode");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("street");

                    b.HasKey("IdAdress")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "NeighborhoodId" }, "neighborhoodId_idx");

                    b.ToTable("Adress", (string)null);
                });

            modelBuilder.Entity("ProInvestAPI.Models.Client", b =>
                {
                    b.Property<int>("IdClient")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idClient");

                    b.Property<string>("AcademicDegree")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("academicDegree");

                    b.Property<int?>("AdressId")
                        .HasColumnType("int")
                        .HasColumnName("adressId");

                    b.Property<string>("BirthDay")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("birthDay");

                    b.Property<string>("CompanyName")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("companyName");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("lastName");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("name");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("phoneNumber");

                    b.Property<string>("Profession")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("profession");

                    b.Property<string>("Rfc")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("RFC");

                    b.HasKey("IdClient")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "AdressId" }, "adressId_idx");

                    b.ToTable("Client", (string)null);
                });

            modelBuilder.Entity("ProInvestAPI.Models.Document", b =>
                {
                    b.Property<int>("IdDocuments")
                        .HasColumnType("int")
                        .HasColumnName("idDocuments");

                    b.Property<int>("DocumentTypeId")
                        .HasColumnType("int")
                        .HasColumnName("documentTypeId");

                    b.Property<byte[]>("File")
                        .IsRequired()
                        .HasColumnType("blob")
                        .HasColumnName("file");

                    b.Property<string>("FileFormat")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("fileFormat");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("fileName");

                    b.Property<string>("FileSize")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("fileSize");

                    b.Property<int>("InvestmentRequestId")
                        .HasColumnType("int")
                        .HasColumnName("investmentRequestId");

                    b.HasKey("IdDocuments")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "DocumentTypeId" }, "documentTypeId_idx");

                    b.HasIndex(new[] { "InvestmentRequestId" }, "investmentRequestId_idx");

                    b.ToTable("Document", (string)null);
                });

            modelBuilder.Entity("ProInvestAPI.Models.DocumentType", b =>
                {
                    b.Property<int>("IdDocumentType")
                        .HasColumnType("int")
                        .HasColumnName("idDocumentType");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("typeName");

                    b.HasKey("IdDocumentType")
                        .HasName("PRIMARY");

                    b.ToTable("DocumentType", (string)null);
                });

            modelBuilder.Entity("ProInvestAPI.Models.InvestmentRequest", b =>
                {
                    b.Property<int>("IdInvestmentRequest")
                        .HasColumnType("int")
                        .HasColumnName("idInvestmentRequest");

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("clientId");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime")
                        .HasColumnName("date");

                    b.Property<string>("InvestmentFolio")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("investmentFolio");

                    b.Property<int>("InvestmentSimulatorId")
                        .HasColumnType("int")
                        .HasColumnName("investmentSimulatorId");

                    b.Property<string>("Ipaddress")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("IPAddress");

                    b.Property<int>("OriginOfFounds")
                        .HasColumnType("int")
                        .HasColumnName("originOfFounds");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.HasKey("IdInvestmentRequest")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ClientId" }, "clientId_idx");

                    b.HasIndex(new[] { "InvestmentSimulatorId" }, "investmentSimulatorId_idx");

                    b.HasIndex(new[] { "OriginOfFounds" }, "originOfFounds_idx");

                    b.HasIndex(new[] { "Status" }, "requestStatusId_idx");

                    b.ToTable("InvestmentRequest", (string)null);
                });

            modelBuilder.Entity("ProInvestAPI.Models.InvestmentSimulator", b =>
                {
                    b.Property<int>("IdInvestmentSimulator")
                        .HasColumnType("int")
                        .HasColumnName("idInvestmentSimulator");

                    b.Property<int?>("EstimatedResult")
                        .HasColumnType("int")
                        .HasColumnName("estimatedResult");

                    b.Property<int>("InvestmentAmount")
                        .HasColumnType("int")
                        .HasColumnName("investmentAmount");

                    b.Property<int>("InvestmentTerm")
                        .HasColumnType("int")
                        .HasColumnName("investmentTerm");

                    b.Property<int>("InvestmentType")
                        .HasColumnType("int")
                        .HasColumnName("investmentType");

                    b.Property<string>("SimulationDate")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("simulationDate");

                    b.HasKey("IdInvestmentSimulator")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "InvestmentType" }, "investmentType_idx");

                    b.ToTable("InvestmentSimulator", (string)null);
                });

            modelBuilder.Entity("ProInvestAPI.Models.InvestmentType", b =>
                {
                    b.Property<int>("IdInvestmentType")
                        .HasColumnType("int")
                        .HasColumnName("idInvestmentType");

                    b.Property<int>("AnualInterestRate")
                        .HasColumnType("int")
                        .HasColumnName("anualInterestRate");

                    b.Property<int>("GatNominal")
                        .HasColumnType("int")
                        .HasColumnName("GAT_Nominal");

                    b.Property<int>("GatReal")
                        .HasColumnType("int")
                        .HasColumnName("GAT_Real");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("typeName");

                    b.HasKey("IdInvestmentType")
                        .HasName("PRIMARY");

                    b.ToTable("InvestmentType", (string)null);
                });

            modelBuilder.Entity("ProInvestAPI.Models.Municipality", b =>
                {
                    b.Property<int>("IdMunicipality")
                        .HasColumnType("int")
                        .HasColumnName("idMunicipality");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("name");

                    b.HasKey("IdMunicipality")
                        .HasName("PRIMARY");

                    b.ToTable("Municipality", (string)null);
                });

            modelBuilder.Entity("ProInvestAPI.Models.Neighborhood", b =>
                {
                    b.Property<int>("IdNeighborhood")
                        .HasColumnType("int")
                        .HasColumnName("idNeighborhood");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("name");

                    b.Property<int>("PostalCodeId")
                        .HasColumnType("int")
                        .HasColumnName("postalCodeId");

                    b.HasKey("IdNeighborhood")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "PostalCodeId" }, "postalCodeId_idx");

                    b.ToTable("Neighborhood", (string)null);
                });

            modelBuilder.Entity("ProInvestAPI.Models.OriginOfFound", b =>
                {
                    b.Property<int>("IdOriginOfFounds")
                        .HasColumnType("int")
                        .HasColumnName("idOriginOfFounds");

                    b.Property<string>("NameOfOrigin")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("nameOfOrigin");

                    b.HasKey("IdOriginOfFounds")
                        .HasName("PRIMARY");

                    b.ToTable("OriginOfFounds");
                });

            modelBuilder.Entity("ProInvestAPI.Models.PostalCode", b =>
                {
                    b.Property<int>("IdpostalCode")
                        .HasColumnType("int")
                        .HasColumnName("idpostalCode");

                    b.Property<int>("MunicipalityId")
                        .HasColumnType("int")
                        .HasColumnName("municipalityId");

                    b.Property<int>("StateId")
                        .HasColumnType("int")
                        .HasColumnName("stateId");

                    b.HasKey("IdpostalCode")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "MunicipalityId" }, "municipalityId_idx");

                    b.HasIndex(new[] { "StateId" }, "stateId_idx");

                    b.ToTable("postalCode", (string)null);
                });

            modelBuilder.Entity("ProInvestAPI.Models.RequestStatus", b =>
                {
                    b.Property<int>("IdRequestStatus")
                        .HasColumnType("int")
                        .HasColumnName("idRequestStatus");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("name");

                    b.HasKey("IdRequestStatus")
                        .HasName("PRIMARY");

                    b.ToTable("RequestStatus", (string)null);
                });

            modelBuilder.Entity("ProInvestAPI.Models.State", b =>
                {
                    b.Property<int>("IdStates")
                        .HasColumnType("int")
                        .HasColumnName("idStates");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("name");

                    b.HasKey("IdStates")
                        .HasName("PRIMARY");

                    b.ToTable("State", (string)null);
                });

            modelBuilder.Entity("ProInvestAPI.Models.User", b =>
                {
                    b.Property<int>("IdUser")
                        .HasColumnType("int")
                        .HasColumnName("idUser");

                    b.Property<DateTime?>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("create_time")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("password");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("varchar(16)")
                        .HasColumnName("username");

                    b.HasKey("IdUser")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Email" }, "email");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("ProInvestAPI.Models.Adress", b =>
                {
                    b.HasOne("ProInvestAPI.Models.Neighborhood", "Neighborhood")
                        .WithMany("Adresses")
                        .HasForeignKey("NeighborhoodId")
                        .IsRequired()
                        .HasConstraintName("neighborhoodId");

                    b.Navigation("Neighborhood");
                });

            modelBuilder.Entity("ProInvestAPI.Models.Client", b =>
                {
                    b.HasOne("ProInvestAPI.Models.Adress", "Adress")
                        .WithMany("Clients")
                        .HasForeignKey("AdressId")
                        .HasConstraintName("adressId");

                    b.Navigation("Adress");
                });

            modelBuilder.Entity("ProInvestAPI.Models.Document", b =>
                {
                    b.HasOne("ProInvestAPI.Models.DocumentType", "DocumentType")
                        .WithMany("Documents")
                        .HasForeignKey("DocumentTypeId")
                        .IsRequired()
                        .HasConstraintName("documentTypeId");

                    b.HasOne("ProInvestAPI.Models.InvestmentRequest", "InvestmentRequest")
                        .WithMany("Documents")
                        .HasForeignKey("InvestmentRequestId")
                        .IsRequired()
                        .HasConstraintName("investmentRequestId");

                    b.Navigation("DocumentType");

                    b.Navigation("InvestmentRequest");
                });

            modelBuilder.Entity("ProInvestAPI.Models.InvestmentRequest", b =>
                {
                    b.HasOne("ProInvestAPI.Models.Client", "Client")
                        .WithMany("InvestmentRequests")
                        .HasForeignKey("ClientId")
                        .IsRequired()
                        .HasConstraintName("clientId");

                    b.HasOne("ProInvestAPI.Models.InvestmentSimulator", "InvestmentSimulator")
                        .WithMany("InvestmentRequests")
                        .HasForeignKey("InvestmentSimulatorId")
                        .IsRequired()
                        .HasConstraintName("investmentSimulatorId");

                    b.HasOne("ProInvestAPI.Models.OriginOfFound", "OriginOfFoundsNavigation")
                        .WithMany("InvestmentRequests")
                        .HasForeignKey("OriginOfFounds")
                        .IsRequired()
                        .HasConstraintName("originOfFounds");

                    b.HasOne("ProInvestAPI.Models.RequestStatus", "StatusNavigation")
                        .WithMany("InvestmentRequests")
                        .HasForeignKey("Status")
                        .IsRequired()
                        .HasConstraintName("requestStatusId");

                    b.Navigation("Client");

                    b.Navigation("InvestmentSimulator");

                    b.Navigation("OriginOfFoundsNavigation");

                    b.Navigation("StatusNavigation");
                });

            modelBuilder.Entity("ProInvestAPI.Models.InvestmentSimulator", b =>
                {
                    b.HasOne("ProInvestAPI.Models.InvestmentType", "InvestmentTypeNavigation")
                        .WithMany("InvestmentSimulators")
                        .HasForeignKey("InvestmentType")
                        .IsRequired()
                        .HasConstraintName("investmentType");

                    b.Navigation("InvestmentTypeNavigation");
                });

            modelBuilder.Entity("ProInvestAPI.Models.Neighborhood", b =>
                {
                    b.HasOne("ProInvestAPI.Models.PostalCode", "PostalCode")
                        .WithMany("Neighborhoods")
                        .HasForeignKey("PostalCodeId")
                        .IsRequired()
                        .HasConstraintName("postalCodeId");

                    b.Navigation("PostalCode");
                });

            modelBuilder.Entity("ProInvestAPI.Models.PostalCode", b =>
                {
                    b.HasOne("ProInvestAPI.Models.Municipality", "Municipality")
                        .WithMany("PostalCodes")
                        .HasForeignKey("MunicipalityId")
                        .IsRequired()
                        .HasConstraintName("municipalityId");

                    b.HasOne("ProInvestAPI.Models.State", "State")
                        .WithMany("PostalCodes")
                        .HasForeignKey("StateId")
                        .IsRequired()
                        .HasConstraintName("stateId");

                    b.Navigation("Municipality");

                    b.Navigation("State");
                });

            modelBuilder.Entity("ProInvestAPI.Models.User", b =>
                {
                    b.HasOne("ProInvestAPI.Models.Client", "IdUserNavigation")
                        .WithOne("User")
                        .HasForeignKey("ProInvestAPI.Models.User", "IdUser")
                        .IsRequired()
                        .HasConstraintName("cliendId");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("ProInvestAPI.Models.Adress", b =>
                {
                    b.Navigation("Clients");
                });

            modelBuilder.Entity("ProInvestAPI.Models.Client", b =>
                {
                    b.Navigation("InvestmentRequests");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProInvestAPI.Models.DocumentType", b =>
                {
                    b.Navigation("Documents");
                });

            modelBuilder.Entity("ProInvestAPI.Models.InvestmentRequest", b =>
                {
                    b.Navigation("Documents");
                });

            modelBuilder.Entity("ProInvestAPI.Models.InvestmentSimulator", b =>
                {
                    b.Navigation("InvestmentRequests");
                });

            modelBuilder.Entity("ProInvestAPI.Models.InvestmentType", b =>
                {
                    b.Navigation("InvestmentSimulators");
                });

            modelBuilder.Entity("ProInvestAPI.Models.Municipality", b =>
                {
                    b.Navigation("PostalCodes");
                });

            modelBuilder.Entity("ProInvestAPI.Models.Neighborhood", b =>
                {
                    b.Navigation("Adresses");
                });

            modelBuilder.Entity("ProInvestAPI.Models.OriginOfFound", b =>
                {
                    b.Navigation("InvestmentRequests");
                });

            modelBuilder.Entity("ProInvestAPI.Models.PostalCode", b =>
                {
                    b.Navigation("Neighborhoods");
                });

            modelBuilder.Entity("ProInvestAPI.Models.RequestStatus", b =>
                {
                    b.Navigation("InvestmentRequests");
                });

            modelBuilder.Entity("ProInvestAPI.Models.State", b =>
                {
                    b.Navigation("PostalCodes");
                });
#pragma warning restore 612, 618
        }
    }
}
